<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-04-24T23:26:41+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">MaxizYB’s Blog</title><subtitle>A personal blog powered by Jekyll.</subtitle><author><name>MaxizYB</name></author><entry><title type="html">Welcome</title><link href="http://localhost:4000/blog/2025/04/24/welcome.html" rel="alternate" type="text/html" title="Welcome" /><published>2025-04-24T12:00:01+08:00</published><updated>2025-04-24T12:00:01+08:00</updated><id>http://localhost:4000/blog/2025/04/24/welcome</id><content type="html" xml:base="http://localhost:4000/blog/2025/04/24/welcome.html"><![CDATA[<ul>
  <li>hello</li>
  <li>world</li>
  <li>wow</li>
</ul>]]></content><author><name>MaxizYB</name></author><category term="blog" /><category term="jekyll" /><summary type="html"><![CDATA[hello world wow]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/blog/2025/04/24/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2025-04-24T12:00:00+08:00</published><updated>2025-04-24T12:00:00+08:00</updated><id>http://localhost:4000/blog/2025/04/24/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/blog/2025/04/24/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Edit it to change the contents. For more information about Jekyll, check out the <a href="https://jekyllrb.com/">Jekyll documentation</a>.</p>]]></content><author><name>MaxizYB</name></author><category term="blog" /><category term="jekyll" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Edit it to change the contents. For more information about Jekyll, check out the Jekyll documentation.]]></summary></entry><entry><title type="html">计算系统基础</title><link href="http://localhost:4000/2025/04/24/%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80.html" rel="alternate" type="text/html" title="计算系统基础" /><published>2025-04-24T00:00:00+08:00</published><updated>2025-04-24T00:00:00+08:00</updated><id>http://localhost:4000/2025/04/24/%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80</id><content type="html" xml:base="http://localhost:4000/2025/04/24/%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80.html"><![CDATA[<h1 id="计算系统基础">计算系统基础</h1>

<h2 id="考试题型">考试题型</h2>

<ul>
  <li>上机是否算作考试？</li>
  <li></li>
</ul>

<h2 id="计算系统概述-223">计算系统概述 2.23</h2>

<p><strong>位和数据类型</strong></p>

<ul>
  <li>信息的最小单位——比特</li>
  <li>信息存储的基本单元——字节</li>
</ul>

<p><strong>进位计数制</strong></p>

<ul>
  <li>二进制向十六进制的转换？向八进制的转换？还有就是十进制整数小数与二进制数的相互转化</li>
</ul>

<p><strong>整数数据类型</strong></p>

<ul>
  <li>在二进制上分为“无符号整数”和“有符号整数”</li>
  <li>B2U 即 Binary to Unsigned，指二进制转无符号数<img src="C:\Users\Araya\AppData\Roaming\Typora\typora-user-images\image-20250301194034818.png" alt="image-20250301194034818" /></li>
  <li>有符号整数又可以有三种编码方式：原码，反码，补码</li>
  <li>正数的三种编码方式都一样，第一位为0作为符号位，负数的原码为符号位取反，反码为正数的反码直接取反，补码为正数取反+1</li>
  <li>
    <p>补码运算注意事项：</p>

    <ol>
      <li>实现加减操作时先补齐符号位！负数一定要用1来补齐</li>
      <li>计算补码的十进制时一定要先看符号位，确定符号后再操作，负数不要忘记加-</li>
    </ol>
  </li>
</ul>

<h2 id="数据的机器级表示-浮点数-ascii">数据的机器级表示 浮点数 ASCII</h2>

<p><strong>定点小数</strong></p>

<p><strong>浮点小数</strong></p>

<ul>
  <li>十进制转为二进制IEEE浮点数，1+8+23，易错点：指数位数1，三种情况分不清，规格化和非规格化的区别</li>
  <li>整理：<img src="C:\Users\Araya\AppData\Roaming\Typora\typora-user-images\image-20250309162042866.png" alt="image-20250309162042866" /></li>
</ul>

<p><strong>位运算</strong></p>

<p>-126 to 127</p>

<p>-125</p>

<p><strong>算术运算</strong></p>

<p>• 无符号/有符号（补码）整数的加减乘除运算
• 定点/浮点数加减乘除运算
• 变量与常数间的乘除运算</p>

<p><strong>补码整数加法运算</strong></p>

<ul>
  <li>直接相加，注意要先转化为补码形式，符号位补全</li>
</ul>

<p><strong>补码整数减法运算</strong></p>

<ul>
  <li>• [X-Y]补 = [X]补 - [Y]补 = [X]补 + [-Y]补
• [-Y]补= [[Y]补]补
• [Y]补按位取反加1
• 例：已知 [Y]补 =10011 求 [–Y]补
• [Y]补 =10011 Y=–1101 -Y= 1101
• [-Y]补 = 01101 对比 [Y]补 =10011
• 例：已知 X=+10101 Y=+10010 求X-Y
• [X]补=010101 , [Y]补=010010 , [-Y]补=101110
• [X-Y]补=[X]补+[-Y]补=010101+101110=1 000011
• X - Y= + 00011</li>
</ul>

<p><strong>符号拓展</strong></p>

<p>• 如果用0来扩展一个正数的左端，它的值不会改变
• 如果用1来扩展一个负数的左端，其值亦不会改变
• 在这两种情况中扩展的都是符号位，这种运算被称为符号扩展（Sign-EXTension，SEXT）
• 用于对不同长度的数值之间的运算</p>

<p><strong>溢出判定</strong></p>

<ol>
  <li>两个正数之和不能为负数，负数同理</li>
  <li>如何检测溢出？</li>
</ol>

<h2 id="数字逻辑电路">数字逻辑电路</h2>

<p><strong>晶体管</strong></p>

<ul>
  <li>MOS晶体管：
    <ul>
      <li>源极，栅极，漏极：内容太多，所以为学，后会有期</li>
      <li>PMOS NMOS</li>
      <li>非门，与非门（P并联），与门，或非门（P串联），或门</li>
      <li>图标记忆的快速方法：或尖，与圆，另外两种标准的第二种标准也需要学习</li>
    </ul>
  </li>
  <li>组合逻辑电路
    <ul>
      <li>有两种基本类型：能够存储信息的，不能存储信息</li>
      <li>其中不能存储信息的：译码器，多路选择器，全加法器</li>
    </ul>
  </li>
  <li>译码器
    <ul>
      <li>能够将二进制（源码）码转换成输出信号</li>
      <li>输入少，输出多</li>
      <li>应用：进行地址分配和单元选择</li>
    </ul>
  </li>
  <li>多路选择器
    <ul>
      <li>由n条选择线和2n个输入组成</li>
    </ul>
  </li>
  <li>半加器
    <ul>
      <li>只能接受两个二进制数相加的逻辑电路</li>
      <li>CI代表输入，CO代表输出，C代表进位，S代表本位</li>
      <li>Si=Ai⨁ Bi=Ai ∙Bi+Ai∙ Bi Ci=Ai∙Bi</li>
    </ul>
  </li>
  <li>全加器
    <ul>
      <li>实现两个半加器的功能</li>
    </ul>
  </li>
  <li>
    <p>数值比较器</p>
  </li>
  <li>组合电路设计
    <ul>
      <li>分析逻辑问题（确定输入、输出）
        <ol>
          <li>根据输入和输出关系列真值表</li>
          <li>根据真值表写出逻辑表达式，并化简
• 最简与或式（基本门逻辑电路）
• 与非式（与非门逻辑电路）</li>
          <li>检查</li>
        </ol>
      </li>
    </ul>
  </li>
  <li>组合电路分析
    <ul>
      <li>分析逻辑图确定输入和输出的关系
        <ol>
          <li>写出逻辑表达式</li>
          <li>列真值表</li>
          <li>分析逻辑功能</li>
          <li>评价或优化</li>
        </ol>
      </li>
    </ul>
  </li>
  <li>时序逻辑电路
    <ul>
      <li>时钟脉冲，时钟发生器</li>
      <li>• 既能处理信息，也能存储信息
• 任何时刻的电路输出不仅取决于当前时刻输入，还取决于电路原来的状态
• 由组合逻辑电路和存储电路组成
• 存储电路必不可少，由锁存器或触发器组成</li>
      <li><img src="C:\Users\Araya\AppData\Roaming\Typora\typora-user-images\image-20250320222607102.png" alt="image-20250320222607102" /></li>
    </ul>
  </li>
  <li>锁存器和触发器
    <ul>
      <li>对脉冲电平敏感的存储电路：锁存器</li>
      <li>对脉冲边沿（上升或下降沿）敏感的存储电路</li>
    </ul>
  </li>
  <li>SR锁存器
    <ul>
      <li><img src="C:\Users\Araya\AppData\Roaming\Typora\typora-user-images\image-20250320221730156.png" alt="image-20250320221730156" /></li>
    </ul>
  </li>
  <li>门控D锁存器
    <ul>
      <li><img src="C:\Users\Araya\AppData\Roaming\Typora\typora-user-images\image-20250320221943161.png" alt="image-20250320221943161" /></li>
      <li>WE = 1, 输出 = D（存储）
 • S = NOT(D), R = D
 • D=0，S=1，R=0，置0
 • D=1，S=0，R=1，置1
• WE = 0, 保持（读取）
 • S = R = 1，输出状态保持不变</li>
    </ul>
  </li>
  <li>主从D触发器
    <ul>
      <li></li>
    </ul>
  </li>
  <li>有限状态机
    <ul>
      <li>分为摩尔型和米莉型</li>
      <li>有限状态机由5个元素组成：
• 有限数目的状态
• 有限数目的外部输入
• 有限数目的外部输出
• 明确定义的状态转换函数
• 明确定义的外部输出函数</li>
      <li>与图灵机的异同？</li>
      <li>图灵机是一种抽象的计算模型，由英国数学家艾伦・图灵在 1936 年提出。它由七元组<em>M</em>=(<em>Q</em>,Σ,Γ,<em>δ</em>,<em>q</em>0,<em>q<strong>a</strong>cce<strong>pt*,*q</strong>re<strong>j</strong>ec**t</em>)组成，各元素的含义如下：
        <ol>
          <li><em>Q</em>：有限状态集合
            <ul>
              <li>图灵机在运行过程中会处于有限个不同的状态，这些状态组成了集合<em>Q</em>。例如，图灵机可能处于读取状态、写入状态、移动状态等。</li>
            </ul>
          </li>
          <li>Σ：输入字母表
            <ul>
              <li>表示图灵机可以接受的输入符号的集合。比如，对于一个处理二进制数据的图灵机，Σ={0,1}；如果要处理英文字母，Σ就是 26 个英文字母的集合等。</li>
            </ul>
          </li>
          <li>Γ：带字母表
            <ul>
              <li>包括图灵机可以在存储带上读写的所有符号的集合。它包含了输入字母表Σ中的所有符号，同时还可能包含一个或多个特殊的空白符号，用于表示存储带的空白区域，通常用<em>B</em>表示。</li>
            </ul>
          </li>
          <li><em>δ</em>：转移函数
            <ul>
              <li>是图灵机的核心部分，它描述了图灵机在当前状态下，根据当前读取到的符号，如何进行状态转移、在存储带上进行读写操作以及移动读写头的规则。例如，<em>δ</em>(<em>q</em>,<em>a</em>)=(<em>q</em>′,<em>b</em>,<em>L</em>)表示图灵机当前处于状态<em>q</em>，读取到符号<em>a</em>时，将状态转移到<em>q</em>′，在当前位置写入符号<em>b</em>，然后将读写头向左移动一格。</li>
            </ul>
          </li>
          <li><em>q</em>0：初始状态
            <ul>
              <li>图灵机在开始运行时所处的状态。在计算开始前，图灵机总是处于这个初始状态，然后根据输入和转移函数逐步进行计算。</li>
            </ul>
          </li>
          <li><em>q<strong>a</strong>cce**pt</em>：接受状态
            <ul>
              <li>当图灵机进入这个状态时，表示它对给定的输入进行计算后，接受了该输入，即认为输入满足某种特定的条件或属于某个特定的语言。</li>
            </ul>
          </li>
          <li><em>q<strong>re</strong>j<strong>ec</strong>t</em>：拒绝状态
            <ul>
              <li>与接受状态相反，当图灵机进入这个状态时，表示它对给定的输入进行计算后，拒绝了该输入，即认为输入不满足特定条件或不属于某个特定的语言。需要注意的是，图灵机对于一个输入，要么进入接受状态，要么进入拒绝状态，二者必居其一。</li>
            </ul>
          </li>
        </ol>
      </li>
    </ul>
  </li>
  <li>
    <p>卡诺图化简法，卡诺圈的概念</p>
  </li>
  <li>
    <p>存储器：Q各种的构造</p>

    <ul>
      <li>寄存器
        <ul>
          <li>位于 CPU 内部，是存储体系中速度最快的层次。它的容量较小，主要用于暂存 CPU 在执行指令过程中需要频繁访问的数据和指令，如当前正在处理的数据、指令的操作数地址等。由于其与 CPU 的紧密结合，能以极快的速度向 CPU 提供数据，满足 CPU 高速运算的需求，从而提高整个计算机系统的运行效率。</li>
        </ul>
      </li>
      <li>高速缓存（Cache）
        <ul>
          <li>是一种高速缓冲存储器，介于 CPU 和主存之间。Cache 的速度比主存快，但容量比主存小。它存储了主存中部分经常被 CPU 访问的数据和指令的副本。当 CPU 需要访问数据时，首先会在 Cache 中查找，如果找到（称为命中），就可以快速从 Cache 中读取数据，而无需访问速度相对较慢的主存，从而大大提高了数据访问的速度。</li>
        </ul>
      </li>
      <li>主存储器（内存）
        <ul>
          <li>主要由随机存取存储器（RAM）和只读存储器（ROM）组成。RAM 用于暂时存储正在运行的程序和数据，计算机在运行过程中，操作系统、应用程序和数据都加载到 RAM 中，CPU 可以直接对其进行读写操作，速度较快但容量有限，且断电后数据丢失。ROM 则用于存储计算机启动时必需的基本程序和数据，如 BIOS，其内容一般在制造时就被固化，只能读出不能写入，断电后数据不丢失。</li>
        </ul>
      </li>
      <li>辅助存储器（外存）
        <ul>
          <li>包括硬盘驱动器（HDD）、固态硬盘（SSD）、光盘驱动器、移动存储设备等。外存的特点是存储容量大，可长期保存大量数据，但数据读写速度相对主存较慢。外存用于存储计算机系统中不经常立即使用的数据和程序，当需要使用这些数据和程序时，再将其从外存加载到主存中。</li>
        </ul>
      </li>
      <li>地址空间</li>
      <li>寻址能力：字节可寻址</li>
    </ul>
  </li>
</ul>

<h2 id="指令集结构">指令集结构</h2>

<ul>
  <li><strong>内存</strong>
    <ul>
      <li>内存地址 32位，寻址能力 8位</li>
      <li>ALU处理信息量的大小为一个字长（32位）（4字节）</li>
      <li>RISC-V小端机：高位字节高地址</li>
    </ul>
  </li>
  <li><strong>寄存器</strong>
    <ul>
      <li>位于CPU内部</li>
      <li>通用寄存器GPR</li>
    </ul>
  </li>
  <li><strong>CISC和RISC</strong>
    <ul>
      <li>• 复杂指令集架构（ Complex Instruction Set Computer, CISC)
• 早期CPU采用的结构，如IBM的System360、Intel的8080和8086系列、Motorola的68000系列
• 架构复杂性高，长度可变，部分指令与高级语言中的操作直接对应
• 典型程序所使用的80%的指令只占指令集总指令数的20%，复杂指令设计投入产出比不高
• 简化软件和编译器设计，增加硬件和流水线设计的复杂性，简单且频繁使用的指令执行效率较低
• 精简指令系统（Reduced Instruction Set Computer，RISC）
• 指令集较小，长度不可变
• 简化了指令编码，使得译码简单
• 简化了访存类型，访存只能通过load/store指令实现
• 执行效率比CISC高，但在开发程序方面则有所欠缺
• MIPS、RISC-V指令集就是RISC的例子</li>
    </ul>
  </li>
  <li><strong>指令</strong>
    <ul>
      <li>• 单/双/半字长（相对于机器字长）；等长/变长指令
• 指明计算机完成的功能（操作码）
• 指明要处理的数据（源/目标操作数）
• 指明如何获取源/目标数据的存放位置（寻址方式）</li>
      <li>指令的分类：
        <ul>
          <li>根据地址码个数</li>
          <li>根据操作数的物理位置SS，RS，SR</li>
          <li>根据指令的功能
            <ul>
              <li>定点算数运算</li>
              <li>位运算</li>
              <li>传送</li>
              <li>控制位移</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>ISA 指令集架构</li>
    </ul>
  </li>
  <li>MIPS指令集架构
    <ul>
      <li>分类
        <ul>
          <li>R指令 op = 000000， SR1，SR2， DR， funct（6位）</li>
          <li>I指令 SR1， DR， imm16</li>
          <li>J指令 op， imm26</li>
        </ul>
      </li>
      <li>寻址方式：
        <ul>
          <li>指令寻址</li>
          <li>操作数寻址，需要补充的是：注意SR1+imm</li>
        </ul>
      </li>
      <li>I指令
        <ul>
          <li>ADDI 立即数会符号拓展，所以以下的立即数应当都是有符号补码二进制整数</li>
          <li>另外，由于立即数只有16位，而寄存器储存32位，所以在立即数与寄存器或者指令运算时都会进行符号扩展</li>
          <li>SUBI</li>
          <li>ORI I = -1，可以…</li>
          <li>XORI</li>
          <li>SLEI 小于等于 真1假0</li>
          <li>SLTI 小于</li>
          <li>SEQ 等于</li>
          <li>SRA shift right arithmetic 算术右移 高位补符号位</li>
          <li>SRLI 逻辑右移 高位补0</li>
          <li>SLLI 逻辑左移</li>
          <li>LHI 加载高位立即数 将立即数左移16位放到目标操作数</li>
          <li>LW SR1的值加上立即数的偏移量作为第一个操作数地址，将对应地址中的（连续4个）数值加载到DR</li>
          <li>LB 只加载一个存储单元，<strong>符号扩展到32位</strong></li>
          <li>SW 将DR中的数值存储到SR+I</li>
          <li>SB同理</li>
          <li>BEQZ 有条件分支 SR1为0时等于零时分支（PC+4+SEXT），否则等于下一个分支（PC+4）</li>
          <li>JR 寄存器跳转 跳转到SR所存储的地址所代表的指令</li>
          <li>J 直接跳转到Imm扩展后的地址的指令</li>
          <li>TRAP</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>几个需要注意的易错点：
    <ul>
      <li>指令类型总共有：R I J</li>
      <li>特殊需要记忆的指令有：
        <ul>
          <li>LHI：它的SR第一位寄存器未用</li>
          <li>BEQZ和BNEZ：首先，他们的DR第二位寄存器均未使用，其次，他们的跳转指令的位置是PC+4+imm（SEXT），注意一定要+4</li>
          <li>J：有26位的立即数，它的跳转是PC+4+SEXT（imm）</li>
          <li>JR：第二位DR寄存器未使用，跳转到SR+imm16所代表的地址</li>
          <li>注意：LB LW等的取指令地址直接就是SR+imm所对应的地址</li>
          <li>MIPS指令集使用大端机，高字节位存放低地址</li>
        </ul>
      </li>
      <li>在处理指令序列时的易错点
        <ul>
          <li>对于BEQZ指令，它本质上单独并不构成分支，因为最下面的一条总会执行，一定要注意</li>
          <li>TODO</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>DLX指令处理
    <ul>
      <li>多时钟周期的实现方案
        <ul>
          <li>指令的每一步将占用一个时钟周期</li>
          <li>不同的指令可能被分解为不同的步骤</li>
          <li>占用不同的时钟周期，多周期因此得名</li>
        </ul>
      </li>
      <li>实现步骤
        <ul>
          <li>取指令</li>
          <li>译码 取寄存器</li>
          <li>执行 有效地址 完成分支</li>
          <li>访问内存</li>
          <li>存储结果</li>
          <li>以上阶段并不均需要，只需要其中3到5个阶段</li>
          <li>• 一条指令的执行可能包含3~5个阶段，
每一个阶段还由一些步骤组成
• 执行每一个阶段的每一步都是由控制
单元的有限状态机控制的
• 状态在时钟控制下发生转换</li>
        </ul>
      </li>
      <li>简化的状态图 寄存器传送语言RTL
        <ul>
          <li>硬件描述语言</li>
          <li>M[xx]表示在存储器中xx地址的值</li>
          <li>reg[]表示寄存器xx的值</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="汇编语言">汇编语言</h2>

<ul>
  <li>指令
    <ul>
      <li>包括四个部分：标记label， 操作码opcode， 操作数operands， 注释comments</li>
      <li>用#表示十进制，x表示十六进制</li>
      <li>标记和注释是可选的</li>
      <li>算数/逻辑运算指令：</li>
      <li>数据传送指令：
        <ul>
          <li>需要注意的是：LW/LB DR imm(SR)， SW/SB imm(SR) DR</li>
        </ul>
      </li>
      <li>控制指令：
        <ul>
          <li>BEQZ：SR Label</li>
          <li>J Label</li>
          <li>JR SR1</li>
          <li>TRAP Imm</li>
        </ul>
      </li>
      <li>标记：用来表示存储单元
        <ul>
          <li>该单元为某个分支指令或J指令的目标</li>
          <li>该单元包含的是某个被加载或存储的值</li>
        </ul>
      </li>
      <li>DLX的边界对齐：32位的字地址必须是4的倍数</li>
      <li>注释用；表示</li>
    </ul>
  </li>
  <li>伪操作
    <ul>
      <li>以.作为第一个字符，容易识别</li>
      <li>.data adress</li>
      <li>. align n 加载到以n个0结尾的地址</li>
      <li>.word word1, word2… 将字12存储到一段连续的存储单元</li>
      <li>.space size 在数据区留出size大小的存储单元</li>
      <li>.ascii “str” 直接将str存储</li>
      <li>.asciiz “”存储后再加一个0</li>
      <li>在代码区使用 .text address表示将DLX指令存放在某个位置</li>
    </ul>
  </li>
  <li>汇编过程
    <ul>
      <li>两次扫描
        <ul>
          <li>第一次建立符号表，即将标识出的符号地址对应实际的二进制地址</li>
          <li>第二趟再将各条汇编语言指令翻译成相应的机器语言指令</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>]]></content><author><name>MaxizYB</name></author><summary type="html"><![CDATA[计算系统基础]]></summary></entry></feed>